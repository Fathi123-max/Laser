import 'package:hive/hive.dart';

part 'user.g.dart'; // This file will be generated by running the Hive generator

@HiveType(typeId: 4) // Ensure this typeId is unique.
class User extends HiveObject {
  @HiveField(0)
  final String? username;

  @HiveField(1)
  final String? mobileNumber;

  @HiveField(2)
  final String? updatedAt; // Changed to String?

  @HiveField(3)
  final String? createdAt; // Changed to String?

  @HiveField(4)
  final int? id;

  User({
    this.username,
    this.mobileNumber,
    this.updatedAt,
    this.createdAt,
    this.id,
  });

  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      username: json['username'],
      mobileNumber: json['mobileNumber'],
      updatedAt: json['updatedAt'] as String?, // Changed to direct assignment
      createdAt: json['createdAt'] as String?, // Changed to direct assignment
      id: json['id'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'username': username,
      'mobileNumber': mobileNumber,
      'updatedAt': updatedAt?.toString(), // Convert DateTime to String
      'createdAt': createdAt?.toString(), // Convert DateTime to String
      'id': id,
    };
  }

  User.fromData(
      {required this.username,
      required this.mobileNumber,
      String? updatedAt,
      String? createdAt,
      required this.id})
      : this.updatedAt =
            updatedAt == null ? null : DateTime.tryParse(updatedAt)?.toString(),
        this.createdAt =
            createdAt == null ? null : DateTime.tryParse(createdAt)?.toString();

  // Add methods to get updatedAt and createdAt as DateTime.
  DateTime? getUpdatedAtAsDateTime() {
    return updatedAt == null ? null : DateTime.tryParse(updatedAt!);
  }

  DateTime? getCreatedAtAsDateTime() {
    return createdAt == null ? null : DateTime.tryParse(createdAt!);
  }
}
